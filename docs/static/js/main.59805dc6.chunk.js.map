{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","item","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OACI,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCLnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCJJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAbAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEZ,CAAEpB,IAGEqB,EDnB0BM,CAAc3B,GAAlCa,EADwB,EAC7BN,KAAaa,EADgB,EAChBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAmB,GAAI,OACZ,cAAC,EAAD,eAESA,GADCA,EAAKjB,aEX1BkB,EAAe,WAAM,MAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAiB9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAmB,GAAI,OAChB,cAAC,EAAD,CAEI5B,SAAW4B,GADLA,Y,MCxBlCG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.59805dc6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );//Cada que se dispara este evento; se actualiza el valor de \"inputValue\" con lo ÚLTIMO QUE ESCRIBIÓ EL USUARIO.\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault(); //Prevenimos el comportamiento por defecto que tiene la etiqueta <form>. El cual es refrescar la página.\r\n        \r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=6bRnKWfd4caMJzICLnJKqwulKPYu3kCL`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs; //IMPORTANTE: Retornará una PROMESA que resuelve el arreglo de objetos.\r\n}","import React from \"react\";\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    //console.log( {id, title, url} );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {    \r\n    const { data:images, loading } = useFetchGifs( category ); \r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n            <div className=\"card-grid\">            \r\n                {\r\n                    images.map( item => (\r\n                        <GifGridItem \r\n                            key={ item.id }\r\n                            { ...item }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //El hook \"useEffect\" NO PUEDE SER \"async\".\r\n    useEffect( () => {\r\n        getGifs( category ) //Retorna una PROMESA.\r\n            .then( imgs => {\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false //Es false porque ya se terminó de cargar las imágenes.\r\n                    });\r\n                }, 3000);\r\n            })\r\n    }, [ category ]) //El segundo argumento es un Arreglo de DEPENDENCIAS.\r\n    //Si en ese argumento mandamos un arreglo VACÍO (sin ninguna dependencia); lo que está dentro de \"useEffect\", se EJECUTARÁ SÓLO LA PRIMERA VEZ QUE SE RENDERIZA EL COMPONENTE.\r\n\r\n    return state; //Retorna el OBJETO: {data: [], loading: true}\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categorias = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    /*\r\n    const handleAdd = () => {\r\n        //Esto no FUNCIONA si sólo queremos AÑADIR un nuevo elemento.\r\n        //Porque lo que estamos haciendo es VOLVER A ASIGNAR LOS DATOS. Y ya NO ES UN ARREGLO; ahora es un String.\r\n        //setCategories( 'HunterXUhunter' );\r\n        setCategories( [...categories, 'HunterXHunter'] );\r\n\r\n        //Si quisiéramos que el elemento a agregar esté al INICIO DEL NUEVO ARREGLO; hacemos lo siguiente:\r\n        //setCategories( ['HunterXHunter', ...categories] );\r\n\r\n        //Otra forma de agregar un elemento al arreglo:\r\n        //setCategories( cats => [...cats, 'HunterXHunter'] );\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>            \r\n\r\n            <ol>\r\n                {\r\n                    categories.map( item => (\r\n                        <GifGrid \r\n                            key={ item }\r\n                            category={ item }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(  \n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}